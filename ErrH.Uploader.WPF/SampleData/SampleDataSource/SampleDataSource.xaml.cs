//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				Uri resourceUri = new Uri("/ErrH.Uploader.WPF;component/SampleData/SampleDataSource/SampleDataSource.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private MainList _MainList = new MainList();

		public MainList MainList
		{
			get
			{
				return this._MainList;
			}
		}
	}

	public class MainList : System.Collections.ObjectModel.ObservableCollection<MainListItem>
	{ 
	}

	public class MainListItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Filename = string.Empty;

		public string Filename
		{
			get
			{
				return this._Filename;
			}

			set
			{
				if (this._Filename != value)
				{
					this._Filename = value;
					this.OnPropertyChanged("Filename");
				}
			}
		}

		private string _Difference = string.Empty;

		public string Difference
		{
			get
			{
				return this._Difference;
			}

			set
			{
				if (this._Difference != value)
				{
					this._Difference = value;
					this.OnPropertyChanged("Difference");
				}
			}
		}

		private string _Version = string.Empty;

		public string Version
		{
			get
			{
				return this._Version;
			}

			set
			{
				if (this._Version != value)
				{
					this._Version = value;
					this.OnPropertyChanged("Version");
				}
			}
		}

		private string _Status = string.Empty;

		public string Status
		{
			get
			{
				return this._Status;
			}

			set
			{
				if (this._Status != value)
				{
					this._Status = value;
					this.OnPropertyChanged("Status");
				}
			}
		}

		private string _NextStep = string.Empty;

		public string NextStep
		{
			get
			{
				return this._NextStep;
			}

			set
			{
				if (this._NextStep != value)
				{
					this._NextStep = value;
					this.OnPropertyChanged("NextStep");
				}
			}
		}

		private string _Target = string.Empty;

		public string Target
		{
			get
			{
				return this._Target;
			}

			set
			{
				if (this._Target != value)
				{
					this._Target = value;
					this.OnPropertyChanged("Target");
				}
			}
		}
	}
#endif
}
